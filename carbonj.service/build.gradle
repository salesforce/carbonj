import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"
        classpath "org.hibernate.build.gradle:gradle-maven-publish-auth:${mavenPublish}"
    }
}

plugins {
    id "com.github.hierynomus.license"
    id 'maven-publish'
    id 'org.springframework.boot'
    id 'net.researchgate.release' version "${gradleRelease}"
    id 'com.netflix.nebula.ospackage' version "${ospackage}"
}

license {
    header rootProject.file('LICENSE-HEADER-JAVA')
    exclude "**/banner.txt"
//    include "**/*.conf"
}

task licenseFormatDockerFiles(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: "src").include("main/docker/files/*")
}
licenseFormat.dependsOn licenseFormatDockerFiles

task licenseCheckDockerFiles(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: "src").include("main/docker/files/*")
}
licenseMain.dependsOn licenseCheckDockerFiles

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'

ext {
    if (project.hasProperty('dockerRepo')) {
        dockerRepo = project.dockerRepo
    } else {
        dockerRepo = "";
    }

    if (project.hasProperty('dockerGroup')) {
        dockerGroup = project.dockerGroup
    } else {
        dockerGroup = 'carbonj'
    }
    println("dockerRepo:" + dockerRepo)
    isSnapshot = version.endsWith('-SNAPSHOT')
    if (project.hasProperty('carbonjLogsDir')) {
        carbonj_logs_dir = project.carbonjLogsDir
    } else {
        carbonj_logs_dir = "/log"
    }
    if (project.hasProperty('carbonjGroup')) {
        carbonj_group = project.carbonjGroup
    } else {
        carbonj_group="carbonj"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

bootJar {
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

task copyDockerFiles(type: Copy) {
    from 'src/main/docker/files'
    into 'build/dependency'
}

tasks.register('docker', Exec) {
    dependsOn unpack, copyDockerFiles
    def command = getDockerBuildCmd("${dockerRepo}${project.dockerGroup}:${project.version}", "${project.version}")
    doFirst {
        logger.lifecycle("${command.join(' ')}")
    }
    commandLine 'bash', '-c', command.join(' ')
}

static def getDockerBuildCmd(String name, version) {
    def buildCommandLine = ['docker', 'buildx', 'build', '--platform', 'linux/amd64,linux/arm64', '--builder', 'buildbase', '--push']
    // When build docker image on Mac, pick up the right command for either Intel chips or Mac Silicon and comment out the above command
    // def buildCommandLine = ['docker', 'build', '--platform', 'linux/amd64', '--builder', 'buildbase', '--load']
    // def buildCommandLine = ['docker', 'build', '--platform', 'linux/arm64', '--builder', 'buildbase', '--load']
    buildCommandLine.addAll('--build-arg', "VERSION=${version}")
    buildCommandLine.addAll('-t', name, '.')
    return buildCommandLine
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
//    compile.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}

task rpm(type: Rpm) {
	packageName project.name
	version "${project.hasProperty('versionSuffix') ? version + '_' + project.versionSuffix : version}"
    release "15"
	os LINUX
	permissionGroup 'aws'
	user 'carbonj'

	into '/opt/carbonj'

	from(bootJar.outputs.files) {
		into 'lib'
	}
	from('lib') {
		into 'lib'
	}
    from('src/main/scripts/bin/carbonj.sh') {
		into 'bin'
		fileMode 0554
	}
	from('src/main/resources') {
		fileType CONFIG | NOREPLACE
		into 'config'
	}

    if (carbonj_group) {
        preInstall("""
            getent passwd carbonj > /dev/null 2>&1 || useradd -g ${carbonj_group} -m carbonj
        """)
    }

    if (carbonj_logs_dir) {
        directory("${carbonj_logs_dir}/carbonj", 0755)
        postInstall("chown -R carbonj:${carbonj_group} ${carbonj_logs_dir}/carbonj")
    }
}

// for release automatically push released docker and mvn image to repo
afterReleaseBuild.dependsOn publish
publish.dependsOn docker
publish.dependsOn build

publishing {
    publications {
	}

    repositories {
        mavenLocal()
    }
}


task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

release {
    failOnCommitNeeded = false
    failOnUpdateNeeded = false
    versionPropertyFile = "${rootProject.projectDir}/gradle.properties"
    failOnSnapshotDependencies = false

    git {
        requireBranch.set('master')
    }
}

description = 'CarbonJ Service Implementation'
dependencies {
    implementation project(':cc-metrics-reporter')
    implementation group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: "${log4j}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: "${log4j}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4j}"
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: "${annotationApi}"
    implementation group: 'org.rocksdb', name: 'rocksdbjni', version: "${rocksdb}"
    implementation group: 'com.google.code.gson', name: 'gson', version: "${gson}"
    implementation group: 'com.google.code.externalsortinginjava', name: 'externalsortinginjava', version: "${externalsortinginjava}"
    implementation group: 'com.google.guava', name: 'guava', version: "${guava}"
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: "${commonsLang3}"
    implementation group: 'commons-io', name: 'commons-io', version: "${commonsIo}"
    implementation group: 'joda-time', name: 'joda-time', version: "${jodaTime}"
    implementation group: 'io.netty', name: 'netty-all', version: "${nettyAll}"
    implementation group: 'net.razorvine', name: 'pickle', version: "${pickle}"
    implementation group: 'org.python', name: 'jython-standalone', version: "${jythonStandalone}"
    implementation group: 'com.amazonaws', name: 'amazon-kinesis-client', version: "${amazonKinesisClient}"
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-sts', version: "${awsJavaSdkV1}"
    implementation group: 'io.dropwizard.metrics', name: 'metrics-core', version: "${metrics}"
    implementation group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: "${metrics}"
    implementation group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: "${metrics}"
    implementation group: 'org.msgpack', name: 'jackson-dataformat-msgpack', version: "${msgpack}"
    implementation "jakarta.servlet:jakarta.servlet-api:${servletApi}"
    implementation "org.eclipse.jetty:jetty-server:${jettyServer}"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "${junit}"

    implementation (group:"org.springframework.boot", name:"spring-boot-starter-logging", version: "${springbootVersion}") {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
    }
    implementation group:"org.springframework.boot", name:"spring-boot-starter-web", version: "${springbootVersion}"
    implementation group:"org.springframework.boot", name:"spring-boot-starter-jetty", version: "${springbootVersion}"
    modules {
        module("org.springframework.boot:spring-boot-starter-tomcat") {
            replacedBy("org.springframework.boot:spring-boot-starter-jetty")
        }
    }
    implementation group:"org.springframework.boot", name:"spring-boot-starter-actuator", version: "${springbootVersion}"
    testImplementation group:"org.springframework.boot", name:"spring-boot-starter-test", version: "${springbootVersion}"
}

test {
    useJUnitPlatform()
    maxHeapSize = "2g"
    jvmArgs = [
            '--add-opens', 'java.base/java.util=ALL-UNNAMED',
    ]
    environment "AWS_REGION", "us-east-1"
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces false

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) {
                // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
