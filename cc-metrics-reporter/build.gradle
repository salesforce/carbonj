buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.hibernate.build.gradle:gradle-maven-publish-auth:${mavenPublish}"
    }
}

plugins {
    id 'net.researchgate.release' version "${gradleRelease}"
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'jacoco'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4j}"
    implementation group: 'com.google.guava', name: 'guava', version: "${guava}"
    implementation group: 'io.dropwizard.metrics', name: 'metrics-core', version: "${metrics}"
    implementation group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: "${metrics}"
    implementation group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: "${metrics}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "${junit}"
}

release {
    failOnCommitNeeded = false
    failOnUpdateNeeded = false
}

// for release automatically push released docker and mvn image to repo
afterReleaseBuild.dependsOn publish
publish.dependsOn build

publishing {
    publications {
        artifact(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
    jvmArgs += '--add-opens=jdk.management/com.sun.management.internal=ALL-UNNAMED'
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = true
    }
}

task printCoverageReport {
    dependsOn jacocoTestReport
    doLast {
        def reportFile = file("${projectDir}/build/reports/jacoco/test/jacocoTestReport.csv")
        if (reportFile.exists()) {
            println reportFile.text
        } else {
            println "Coverage report not found!"
        }
    }
}
